package handlers

import (
	"github.com/stretchr/testify/assert"
	"testing"
	"yamul-gateway/internal/dtos/commands"
	"yamul-gateway/internal/interfaces/mocks"
)

func Test_unicodeSpeechRequestReadBuffer(t *testing.T) {
	tests := []struct {
		name string
		args []byte
		want commands.UnicodeSpeechSelected
	}{
		{
			name: "user sends 0 keywords",
			args: []byte{
				0x00, 0x15, 0xc0, 0x02, 0xb2, 0x00, 0x03, 0x49,
				0x56, 0x4c, 0x00, 0x00, 0x00, 0x2e, 0x68, 0x65,
				0x6c, 0x70, 0x00,
			},
			want: commands.UnicodeSpeechSelected{
				Mode:     0x00,
				Hue:      0x02b2,
				Font:     0x0003,
				Language: "IVL\x00",
				Keywords: []uint16{},
				Text:     ".help",
			},
		},
		{
			name: "user sends 1 keyword",
			args: []byte{
				0x00, 0x15, 0xc0, 0x02, 0xb2, 0x00, 0x03, 0x49,
				0x56, 0x4c, 0x00, 0x00, 0x10, 0x16, 0x2e, 0x68,
				0x65, 0x6c, 0x70, 0x00,
			},
			want: commands.UnicodeSpeechSelected{
				Mode:     0x00,
				Hue:      0x02b2,
				Font:     0x0003,
				Language: "IVL\x00",
				Keywords: []uint16{0x016},
				Text:     ".help",
			},
		},
		{
			name: "user sends 2 keywords",
			args: []byte{
				0x00, 0x15, 0xc0, 0x02, 0xb2, 0x00, 0x03, 0x49,
				0x56, 0x4c, 0x00, 0x00, 0x20, 0x16, 0x22, 0x20,
				0x2e, 0x68, 0x65, 0x6c, 0x70, 0x00,
			},
			want: commands.UnicodeSpeechSelected{
				Mode:     0x00,
				Hue:      0x02b2,
				Font:     0x0003,
				Language: "IVL\x00",
				Keywords: []uint16{0x016, 0x222},
				Text:     ".help",
			},
		},
		{
			name: "user sends 3 keywords",
			args: []byte{
				0x00, 0x15, 0xc0, 0x02, 0xb2, 0x00, 0x03, 0x49,
				0x56, 0x4c, 0x00, 0x00, 0x30, 0x16, 0x22, 0x23,
				0x33, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x00,
			},
			want: commands.UnicodeSpeechSelected{
				Mode:     0x00,
				Hue:      0x02b2,
				Font:     0x0003,
				Language: "IVL\x00",
				Keywords: []uint16{0x016, 0x222, 0x333},
				Text:     ".help",
			},
		},
		{
			name: "user sends 4 keywords",
			args: []byte{
				0x00, 0x15, 0xc0, 0x02, 0xb2, 0x00, 0x03, 0x49,
				0x56, 0x4c, 0x00, 0x00, 0x40, 0x16, 0x22, 0x23,
				0x33, 0x44, 0x40, 0x2e, 0x68, 0x65, 0x6c, 0x70,
				0x00,
			},
			want: commands.UnicodeSpeechSelected{
				Mode:     0x00,
				Hue:      0x02b2,
				Font:     0x0003,
				Language: "IVL\x00",
				Keywords: []uint16{0x016, 0x222, 0x333, 0x444},
				Text:     ".help",
			},
		},
		{
			name: "user sends 5 keywords",
			args: []byte{
				0x00, 0x15, 0xc0, 0x02, 0xb2, 0x00, 0x03, 0x49,
				0x56, 0x4c, 0x00, 0x00, 0x50, 0x16, 0x22, 0x23,
				0x33, 0x44, 0x45, 0x55, 0x2e, 0x68, 0x65, 0x6c,
				0x70, 0x00,
			},
			want: commands.UnicodeSpeechSelected{
				Mode:     0x00,
				Hue:      0x02b2,
				Font:     0x0003,
				Language: "IVL\x00",
				Keywords: []uint16{0x016, 0x222, 0x333, 0x444, 0x555},
				Text:     ".help",
			},
		},
		{
			name: "user sends 6 keywords",
			args: []byte{
				0x00, 0x15, 0xc0, 0x02, 0xb2, 0x00, 0x03, 0x49,
				0x56, 0x4c, 0x00, 0x00, 0x61, 0x23, 0x45, 0x67,
				0x89, 0xAB, 0xCD, 0xEF, 0x12, 0x30, 0x2e, 0x68,
				0x65, 0x6c, 0x70, 0x00,
			},
			want: commands.UnicodeSpeechSelected{
				Mode:     0x00,
				Hue:      0x02b2,
				Font:     0x0003,
				Language: "IVL\x00",
				Keywords: []uint16{0x123, 0x456, 0x789, 0xABC, 0xDEF, 0x123},
				Text:     ".help",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			client := mocks.CreateClientConnectionReadBufferMock(t, tt.args)
			assert.Equalf(t, tt.want, unicodeSpeechRequestReadBuffer(client), "unicodeSpeechRequestReadBuffer(%v)", tt.args)
			client.AssertBufferConsumed()
		})
	}
}
