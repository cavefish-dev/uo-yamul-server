package handlers

import (
	"github.com/stretchr/testify/assert"
	"testing"
	"yamul-gateway/internal/dtos/commands"
	"yamul-gateway/internal/interfaces/mocks"
)

func Test_preLoginReadBuffer(t *testing.T) {
	type args struct {
		buffer []byte
	}
	tests := []struct {
		name string
		args args
		want commands.PreLogin
	}{
		{
			name: "Base case",
			args: args{
				buffer: []byte{
					0x5D, 0xED, 0xED, 0xED, 0xED, 0x61, 0x73, 0x64,
					0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x01, 0x02, 0x03, 0x04, 0x01, 0x00, 0x00,
					0x7f,
				},
			},
			want: commands.PreLogin{
				Name:          "asdf",
				Password:      "test",
				Slot:          0x01020304,
				EncryptionKey: 0x0100007F,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			client := mocks.CreateClientConnectionReadBufferMock(t, tt.args.buffer[1:])
			assert.Equalf(t, tt.want, preLoginReadBuffer(client), "preLoginReadBuffer(%v)", tt.args.buffer)
			client.AssertBufferConsumed()
		})
	}
}
